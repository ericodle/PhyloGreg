#The SILVA file is so big I had to chop it up into 1 GB chunks to process or I would crash my computer.

import os

# Define the path to the large FASTA file
input_file_path = "/content/drive/MyDrive/arb-silva.de_2023-04-16_id1249118.fasta"

# Define the maximum size of each output file (1 GB in this example)
max_file_size = 1 * 1024 * 1024 * 1024

# Create a directory to store the output files
output_dir = "/content/drive/MyDrive/"
os.makedirs(output_dir, exist_ok=True)

# Initialize variables to keep track of the current output file and its size
current_output_file = None
current_output_file_size = 0

# Iterate through the input file and write each sequence to an output file
with open(input_file_path, "r") as input_file:
    for line in input_file:
        if line.startswith(">"):
            # If this line is a header, start a new output file if necessary
            if current_output_file is None or current_output_file_size >= max_file_size:
                if current_output_file is not None:
                    current_output_file.close()
                output_file_path = os.path.join(output_dir, f"output_{len(os.listdir(output_dir)) + 1}.fasta")
                current_output_file = open(output_file_path, "w")
                current_output_file_size = 0
            current_output_file.write(line)
        else:
            # If this line is a sequence, write it to the current output file
            current_output_file.write(line)
            current_output_file_size += len(line)
            
# Close the final output file
if current_output_file is not None:
    current_output_file.close()

from collections import defaultdict
import matplotlib.pyplot as plt

def parse_fasta(filename):
    """
    Parses a FASTA file and returns a dictionary of sequence IDs and sequences.
    """
    seqs = defaultdict(str)
    with open(filename, 'r') as f:
        current_id = ''
        for line in f:
            line = line.strip()
            if line.startswith('>'):
                current_id = line[1:]
            else:
                seqs[current_id] += line
    return seqs

def get_stats(seqs):
    """
    Calculates basic statistics (length, GC content) for each sequence in the given dictionary of sequences.
    """
    stats = {}
    for id, seq in seqs.items():
        length = len(seq)
        gc_content = (seq.count('G') + seq.count('C')) / length
        stats[id] = (length, gc_content)
    return stats

def plot_stats(stats):
    """
    Plots histograms of the lengths and GC contents of the given sequences.
    """
    lengths = [length for length, gc_content in stats.values()]
    gc_contents = [gc_content for length, gc_content in stats.values()]

    fig, axs = plt.subplots(1, 2, figsize=(10, 5))
    axs[0].hist(lengths, bins=50)
    axs[0].set_xlabel('Sequence Length')
    axs[0].set_ylabel('Frequency')
    axs[1].hist(gc_contents, bins=50)
    axs[1].set_xlabel('GC Content')
    axs[1].set_ylabel('Frequency')
    plt.show()


folder_path = "/path/to/folder"
stats = {}

# Iterate over the files in the folder
for filename in os.listdir(folder_path):
    file_path = os.path.join(folder_path, filename)
    if os.path.isfile(file_path):
        # Do something with the file, e.g. print its name
        seqs = parse_fasta(filename)
        stats.append = get_stats(seqs)
        
plot_stats(stats)
